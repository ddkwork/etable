// Code generated by "goki generate"; DO NOT EDIT.

package eplot

import (
	"errors"
	"log"
	"strconv"
	"strings"

	"goki.dev/enums"
)

var _PlotTypesValues = []PlotTypes{0, 1}

// PlotTypesN is the highest valid value
// for type PlotTypes, plus one.
const PlotTypesN PlotTypes = 2

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _PlotTypesNoOp() {
	var x [1]struct{}
	_ = x[XY-(0)]
	_ = x[Bar-(1)]
}

var _PlotTypesNameToValueMap = map[string]PlotTypes{
	`XY`:  0,
	`xy`:  0,
	`Bar`: 1,
	`bar`: 1,
}

var _PlotTypesDescMap = map[PlotTypes]string{
	0: `XY is a standard line / point plot`,
	1: `Bar plots vertical bars`,
}

var _PlotTypesMap = map[PlotTypes]string{
	0: `XY`,
	1: `Bar`,
}

// String returns the string representation
// of this PlotTypes value.
func (i PlotTypes) String() string {
	if str, ok := _PlotTypesMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the PlotTypes value from its
// string representation, and returns an
// error if the string is invalid.
func (i *PlotTypes) SetString(s string) error {
	if val, ok := _PlotTypesNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	if val, ok := _PlotTypesNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type PlotTypes")
}

// Int64 returns the PlotTypes value as an int64.
func (i PlotTypes) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the PlotTypes value from an int64.
func (i *PlotTypes) SetInt64(in int64) {
	*i = PlotTypes(in)
}

// Desc returns the description of the PlotTypes value.
func (i PlotTypes) Desc() string {
	if str, ok := _PlotTypesDescMap[i]; ok {
		return str
	}
	return i.String()
}

// PlotTypesValues returns all possible values
// for the type PlotTypes.
func PlotTypesValues() []PlotTypes {
	return _PlotTypesValues
}

// Values returns all possible values
// for the type PlotTypes.
func (i PlotTypes) Values() []enums.Enum {
	res := make([]enums.Enum, len(_PlotTypesValues))
	for i, d := range _PlotTypesValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type PlotTypes.
func (i PlotTypes) IsValid() bool {
	_, ok := _PlotTypesMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i PlotTypes) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *PlotTypes) UnmarshalText(text []byte) error {
	if err := i.SetString(string(text)); err != nil {
		log.Println(err)
	}
	return nil
}
