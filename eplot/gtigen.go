// Code generated by "goki generate"; DO NOT EDIT.

package eplot

import (
	"goki.dev/gi/v2/gi"
	"goki.dev/goosi/events"
	"goki.dev/gti"
	"goki.dev/ki/v2"
	"goki.dev/ordmap"
)

// Plot2DType is the [gti.Type] for [Plot2D]
var Plot2DType = gti.AddType(&gti.Type{
	Name:      "goki.dev/etable/v2/eplot.Plot2D",
	ShortName: "eplot.Plot2D",
	IDName:    "plot-2-d",
	Doc:       "Plot2D is a GoGi Widget that provides a 2D plot of selected columns of etable data",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Table", &gti.Field{Name: "Table", Type: "*goki.dev/etable/v2/etable.IdxView", LocalType: "*etable.IdxView", Doc: "the idxview of the table that we're plotting", Directives: gti.Directives{}, Tag: "set:\"-\""}},
		{"Params", &gti.Field{Name: "Params", Type: "goki.dev/etable/v2/eplot.PlotParams", LocalType: "PlotParams", Doc: "the overall plot parameters", Directives: gti.Directives{}, Tag: ""}},
		{"Cols", &gti.Field{Name: "Cols", Type: "[]*goki.dev/etable/v2/eplot.ColParams", LocalType: "[]*ColParams", Doc: "the parameters for each column of the table", Directives: gti.Directives{}, Tag: "set:\"-\""}},
		{"GPlot", &gti.Field{Name: "GPlot", Type: "*gonum.org/v1/plot.Plot", LocalType: "*plot.Plot", Doc: "the gonum plot that actually does the plotting -- always save the last one generated", Directives: gti.Directives{}, Tag: "set:\"-\" edit:\"-\" json:\"-\" xml:\"-\""}},
		{"SVGFile", &gti.Field{Name: "SVGFile", Type: "goki.dev/gi/v2/gi.FileName", LocalType: "gi.FileName", Doc: "current svg file", Directives: gti.Directives{}, Tag: ""}},
		{"DataFile", &gti.Field{Name: "DataFile", Type: "goki.dev/gi/v2/gi.FileName", LocalType: "gi.FileName", Doc: "current csv data file", Directives: gti.Directives{}, Tag: ""}},
		{"InPlot", &gti.Field{Name: "InPlot", Type: "bool", LocalType: "bool", Doc: "currently doing a plot", Directives: gti.Directives{}, Tag: "set:\"-\" edit:\"-\" json:\"-\" xml:\"-\""}},
	}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Layout", &gti.Field{Name: "Layout", Type: "goki.dev/gi/v2/gi.Layout", LocalType: "gi.Layout", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{
		{"SaveSVG", &gti.Method{Name: "SaveSVG", Doc: "SaveSVG saves the plot to an svg -- first updates to ensure that plot is current", Directives: gti.Directives{
			&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
		}, Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
			{"fname", &gti.Field{Name: "fname", Type: "goki.dev/gi/v2/gi.FileName", LocalType: "gi.FileName", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		}), Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{})}},
		{"SavePNG", &gti.Method{Name: "SavePNG", Doc: "SavePNG saves the current plot to a png, capturing current render", Directives: gti.Directives{
			&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
		}, Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
			{"fname", &gti.Field{Name: "fname", Type: "goki.dev/gi/v2/gi.FileName", LocalType: "gi.FileName", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		}), Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{})}},
		{"SaveCSV", &gti.Method{Name: "SaveCSV", Doc: "SaveCSV saves the Table data to a csv (comma-separated values) file with headers (any delim)", Directives: gti.Directives{
			&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
		}, Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
			{"fname", &gti.Field{Name: "fname", Type: "goki.dev/gi/v2/gi.FileName", LocalType: "gi.FileName", Doc: "", Directives: gti.Directives{}, Tag: ""}},
			{"delim", &gti.Field{Name: "delim", Type: "goki.dev/etable/v2/etable.Delims", LocalType: "etable.Delims", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		}), Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{})}},
		{"SaveAll", &gti.Method{Name: "SaveAll", Doc: "SaveAll saves the current plot to a png, svg, and the data to a tsv -- full save\nAny extension is removed and appropriate extensions are added", Directives: gti.Directives{
			&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
		}, Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
			{"fname", &gti.Field{Name: "fname", Type: "goki.dev/gi/v2/gi.FileName", LocalType: "gi.FileName", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		}), Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{})}},
		{"OpenCSV", &gti.Method{Name: "OpenCSV", Doc: "OpenCSV opens the Table data from a csv (comma-separated values) file (or any delim)", Directives: gti.Directives{
			&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
		}, Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
			{"fname", &gti.Field{Name: "fname", Type: "goki.dev/gi/v2/gi.FileName", LocalType: "gi.FileName", Doc: "", Directives: gti.Directives{}, Tag: ""}},
			{"delim", &gti.Field{Name: "delim", Type: "goki.dev/etable/v2/etable.Delims", LocalType: "etable.Delims", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		}), Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{})}},
	}),
	Instance: &Plot2D{},
})

// NewPlot2D adds a new [Plot2D] with the given name
// to the given parent. If the name is unspecified, it defaults
// to the ID (kebab-case) name of the type, plus the
// [ki.Ki.NumLifetimeChildren] of the given parent.
func NewPlot2D(par ki.Ki, name ...string) *Plot2D {
	return par.NewChild(Plot2DType, name...).(*Plot2D)
}

// KiType returns the [*gti.Type] of [Plot2D]
func (t *Plot2D) KiType() *gti.Type {
	return Plot2DType
}

// New returns a new [*Plot2D] value
func (t *Plot2D) New() ki.Ki {
	return &Plot2D{}
}

// SetParams sets the [Plot2D.Params]:
// the overall plot parameters
func (t *Plot2D) SetParams(v PlotParams) *Plot2D {
	t.Params = v
	return t
}

// SetSvgfile sets the [Plot2D.SVGFile]:
// current svg file
func (t *Plot2D) SetSvgfile(v gi.FileName) *Plot2D {
	t.SVGFile = v
	return t
}

// SetDataFile sets the [Plot2D.DataFile]:
// current csv data file
func (t *Plot2D) SetDataFile(v gi.FileName) *Plot2D {
	t.DataFile = v
	return t
}

// SetTooltip sets the [Plot2D.Tooltip]
func (t *Plot2D) SetTooltip(v string) *Plot2D {
	t.Tooltip = v
	return t
}

// SetClass sets the [Plot2D.Class]
func (t *Plot2D) SetClass(v string) *Plot2D {
	t.Class = v
	return t
}

// SetPriorityEvents sets the [Plot2D.PriorityEvents]
func (t *Plot2D) SetPriorityEvents(v []events.Types) *Plot2D {
	t.PriorityEvents = v
	return t
}

// SetCustomContextMenu sets the [Plot2D.CustomContextMenu]
func (t *Plot2D) SetCustomContextMenu(v func(m *gi.Scene)) *Plot2D {
	t.CustomContextMenu = v
	return t
}

// SetStackTop sets the [Plot2D.StackTop]
func (t *Plot2D) SetStackTop(v int) *Plot2D {
	t.StackTop = v
	return t
}
